#!/usr/bin/env node

/**
 * Build Script for Employee Support Portal
 * Injects environment variables into config.js at build time
 */

const fs = require('fs');
const path = require('path');

// Environment variables with defaults
const config = {
  SUPABASE_URL: process.env.SUPABASE_URL || 'https://your-project.supabase.co',
  SUPABASE_ANON_KEY: process.env.SUPABASE_ANON_KEY || 'your-anon-key-here',
  APP_NAME: process.env.APP_NAME || 'Employee Support Portal',
  APP_VERSION: process.env.APP_VERSION || '1.0.0',
  REFRESH_INTERVAL: process.env.REFRESH_INTERVAL || '30000',
  DEBUG_MODE: process.env.DEBUG_MODE || 'false'
};

// Validate required environment variables
const requiredVars = ['SUPABASE_URL', 'SUPABASE_ANON_KEY'];
const missingVars = requiredVars.filter(varName => 
  !process.env[varName] || process.env[varName].includes('your-')
);

if (missingVars.length > 0) {
  console.warn('‚ö†Ô∏è  Warning: Missing or placeholder environment variables:');
  missingVars.forEach(varName => {
    console.warn(`   - ${varName}: ${config[varName]}`);
  });
  console.warn('   The application will use default values but may not function correctly.');
  console.warn('   Set these in your Render dashboard or .env file for local development.');
}

// Generate config.js content
const configContent = `// üîß Auto-generated configuration file
// This file is generated by build.js and should not be edited manually
// Environment variables are injected at build time

window.CONFIG = {
  SUPABASE_URL: '${config.SUPABASE_URL}',
  SUPABASE_ANON_KEY: '${config.SUPABASE_ANON_KEY}',
  APP_NAME: '${config.APP_NAME}',
  APP_VERSION: '${config.APP_VERSION}',
  REFRESH_INTERVAL: ${config.REFRESH_INTERVAL},
  DEBUG_MODE: ${config.DEBUG_MODE},
  
  // API Configuration (auto-generated from SUPABASE_URL)
  API_BASE_URL: '${config.SUPABASE_URL}/rest/v1',
  REALTIME_URL: '${config.SUPABASE_URL.replace('https://', 'wss://')}/realtime/v1',
  
  // UI Configuration
  CHARTS_CONFIG: {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: { 
        position: 'bottom' 
      }
    }
  },
  
  // Build Information
  BUILD_TIME: '${new Date().toISOString()}',
  NODE_ENV: '${process.env.NODE_ENV || 'production'}'
};

// Debug logging
if (window.CONFIG.DEBUG_MODE === 'true') {
  console.log('üîß Configuration loaded:', window.CONFIG);
}
`;

// Ensure js directory exists
const jsDir = path.join(__dirname, 'js');
if (!fs.existsSync(jsDir)) {
  fs.mkdirSync(jsDir, { recursive: true });
}

// Write config file
const configPath = path.join(jsDir, 'config.js');
fs.writeFileSync(configPath, configContent);

console.log('‚úÖ Build completed successfully!');
console.log(`üìù Configuration written to: ${configPath}`);
console.log(`üìè File size: ${fs.statSync(configPath).size} bytes`);
console.log('üöÄ Ready for deployment to Render');

// Display configuration summary
console.log('\nüìä Configuration Summary:');
console.log(`   App Name: ${config.APP_NAME}`);
console.log(`   Version: ${config.APP_VERSION}`);
console.log(`   Supabase URL: ${config.SUPABASE_URL}`);
console.log(`   Supabase Key: ${config.SUPABASE_ANON_KEY.substring(0, 20)}...`);
console.log(`   Refresh Interval: ${config.REFRESH_INTERVAL}ms`);
console.log(`   Debug Mode: ${config.DEBUG_MODE}`);
console.log(`   Node Environment: ${process.env.NODE_ENV || 'development'}`);

// Verify file contents
try {
    const fileContent = fs.readFileSync(configPath, 'utf8');
    if (fileContent.includes('window.CONFIG')) {
        console.log('‚úÖ Config file structure verified');
    } else {
        console.warn('‚ö†Ô∏è  Config file may be malformed');
    }
} catch (err) {
    console.error('‚ùå Could not verify config file:', err.message);
}
